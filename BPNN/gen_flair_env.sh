#!/bin/bash

# ==============================================================================
#  Intelligent Flair Project Setup Script for VSCode & CLion
# ==============================================================================
# This script intelligently scans the project and SDK to generate precise
# configurations for a modern C++ development environment.
#
# It creates:
#   1. CMakePresets.json: For VSCode to handle cross-compilation.
#   2. .vscode/settings.json: To optimize the VSCode experience.
#   3. .clangd: A comprehensive config with all include paths for flawless
#      autocompletion and code navigation by the clangd language server.
#
# USAGE:
#   1. Ensure this script is in the root of the ptoject directory.
#   2. Make sure the 'flair-src' exist and the toolchains and flair are installed.
#   3. Run from the terminal: chmod +x setup.sh && ./setup.sh
#   4. Open the source project folder in VSCode or CLion.
# ==============================================================================

#set -e # Exit script on any error

echo "⚙️  Starting Intelligent Flair project configuration..."

# --- 1. Define and Validate Core Paths ---
toolchains=($OECORE_CMAKE_TOOLCHAINS)
#echo $toolchains
#SRC_DIR=$(pwd)

if [[ -z "${FLAIR_ROOT}" ]]; then
    echo "❌ ERROR: FLAIR_ROOT not found"
    exit 1
fi
if [[ -z "$toolchains" ]]; then
    echo "❌ ERROR: CMake Toolchain files not found'"
    exit 1
fi

echo "✅ SDK and Toolchain validated."
# --- 2. Generate CMakePresets.json (For Building) ---
echo "📝 Generating 'CMakePresets.json' for the build system..."
#cat > CMakePresets.json <<EOF
#toolchains=$OECORE_CMAKE_TOOLCHAINS

CMakePresets_FILE=CMakePresets.json 
{
  echo "{"
  echo "  \"version\": 3,"
  echo "  \"configurePresets\": ["
  for arch in ${toolchains[@]}; do
  (( i += 1 ))
  toolchain=$(eval "echo \"\$OECORE_CMAKE_${arch^^}_TOOLCHAIN\"")
  CMAKE=$(eval "echo \"\$OECORE_${arch^^}_NATIVE_SYSROOT\"")/usr/bin/cmake
  echo "    {"
  echo "      \"name\": \"flair-cross-compile-$arch\","
  echo "      \"displayName\": \"Flair $arch Cross-Compile (Release)\", "
  echo "      \"description\": \"Configures the build using the Flair $arch toolchain.\","
  echo "      \"generator\": \"Unix Makefiles\","
  echo "      \"binaryDir\": \"${FLAIR_ROOT}/flair-build/build_usr/\${sourceDirName}/$arch\","
  echo "      \"cmakeExecutable\": \"${CMAKE}\","
  echo "      \"cacheVariables\": {"
  echo "        \"CMAKE_BUILD_TYPE\": \"Release\","
  echo "        \"CMAKE_TOOLCHAIN_FILE\": \"${toolchain}\""
  echo "      }"
  if ((${#toolchains[@]} == $i)); then
    echo "    }"
  else 
    echo "    },"
  fi
  done
  echo "  ],"
  echo "  \"buildPresets\": ["
  for arch in ${toolchains[@]}; do
  (( j += 1 ))
  toolchain=$(eval "echo \"\$OECORE_CMAKE_${arch^^}_TOOLCHAIN\"")
  CMAKE=$(eval "echo \"\$OECORE_${arch^^}_NATIVE_SYSROOT\"")/usr/bin/cmake
  echo "    {"
  echo "      \"name\": \"default-$arch\","
  echo "      \"displayName\": \"Flair $arch install (Release)\", "
  echo "      \"configurePreset\": \"flair-cross-compile-$arch\","
  echo "      \"targets\": [\"install\"]"
  if ((${#toolchains[@]} == $j)); then
    echo "    }"
  else 
    echo "    },"
  fi
  done
  echo "  ]"



  echo "}"
} > "$CMakePresets_FILE"


# --- 3. Generate VSCode Settings ---
echo "📝 Generating '.vscode/settings.json' for IDE integration..."
mkdir -p .vscode
cat > .vscode/settings.json <<EOF
{
  // Sets the default configuration provider to CMake Tools for accurate IntelliSense
  "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",

  // Tells VSCode to use the preset file for configuration
  "cmake.configureOnOpen": true,

  "clangd.arguments": [
    "-clang-tidy",
    "-background-index",
    "-compile-commands-dir=$/{cmake.buildDirectory}"
  ],

  // Hides clutter from the file explorer
  "files.exclude": {
    "**/.git": true,
    "build": true,
    "**/*.code-workspace": true
  }

  
}
EOF

# --- 4. Generate Comprehensive .clangd File (For Code Intelligence) ---
echo "🧠 Scanning for all include paths to generate '.clangd' file..."

CLANGD_FILE=".clangd"
{
  echo "# .clangd configuration generated by setup.sh"
  echo "# This file provides a complete list of include paths for the language server."
  echo ""
  echo "CompileFlags:"
  echo "  Add: ["
  #
  echo "    --sysroot=/opt/robomap3/2.1.3/armv7a-neon/sysroots/armv7a-neon-poky-linux-gnueabi,"
  echo "    --target=armv7a-poky-linux-gnueabi,"
  echo "    -mfpu=neon,"
  echo "    -std=c++11,"
  # Find all directories named 'include' in both src and sdk, format them as -I flags
  find "${FLAIR_ROOT}/flair-src/lib" "${FLAIR_ROOT}/flair-src/tools" -type d \( -name "src" -o -name "include" \) | while read -r dir; do
    echo "    -isystem, ${dir}, "
  done

  #if [ -d "${FLAIR_ROOT}/flair-hds"]; then
    find "${FLAIR_ROOT}/flair-hds/src/lib" "${FLAIR_ROOT}/flair-hds/src/tools" "${FLAIR_ROOT}/flair-hds/dev" -type d \( -name "src" -o -name "include" \) | while read -r dir; do
      echo "    -isystem, ${dir}, "
    done
  #fi

  #sudo find "/opt/robomap3/2.1.3/armv7a-neon/sysroots/armv7a-neon-poky-linux-gnueabi" \
  #  "/opt/robomap3/2.1.3/core2-64/sysroots/core2-64-poky-linux" \
  #  -type f -name "*.h" -printf '%h\n' | \
  #  sort -u | \
  #  while read -r dir; do
  #echo "    -isystem, ${dir}, "
  #done

  echo "    -isystem, /opt/robomap3/2.1.3/armv7a-neon/sysroots/armv7a-neon-poky-linux-gnueabi/usr/include/c++/4.9.3,"
  echo "    -isystem, /opt/robomap3/2.1.3/armv7a-neon/sysroots/armv7a-neon-poky-linux-gnueabi/usr/include/c++/4.9.3/backward,"
  echo "    -isystem, /opt/robomap3/2.1.3/armv7a-neon/sysroots/armv7a-neon-poky-linux-gnueabi/usr/include,"
  echo "    -isystem, /opt/robomap3/2.1.3/armv7a-neon/sysroots/armv7a-neon-poky-linux-gnueabi/usr/include/c++/4.9.3/arm-poky-linux-gnueabi,"

  if ! [[ -z "${EIGEN3_INCLUDE_DIR_ARM7a}" ]]; then
    echo "    -isystem, ${EIGEN3_INCLUDE_DIR_ARM7a}"
  fi
  echo "  ]"
  echo ""

  echo "Diagnostics:"
  echo "  ClangTidy:"
  echo "    Add: [modernize*, bugprone*, performance*, cppcoreguidelines*, readability*]"
  echo "    Remove: [modernize-use-trailing-return-type, cppcoreguidelines-avoid-magic-numbers, cppcoreguidelines-owning-memory, readability-magic-numbers,"
  echo "            bugprone-branch-clone, cppcoreguidelines-pro-type-vararg"
  echo "    ]"
  echo "    FastCheckFilter: Strict"
  echo ""
  echo "Index:"
  echo "  Background: Build"
  echo "  StandardLibrary: true"
  echo ""
  echo "Completion:"
  echo "  AllScopes: Yes"
  echo "  ArgumentLists: FullPlaceholders"
  echo "  HeaderInsertion: IWYU"
  echo "  CodePatterns: All"
  echo ""
  echo "InlayHints:"
  echo "  BlockEnd: false"
  echo "  Designators: true"
  echo "  Enabled: true"
  echo "  ParameterNames: true"
  echo "  DeducedTypes: true"
  echo "  DefaultArguments: false"
  echo "  TypeNameLimit: 24"
  echo ""
  echo "Hover:"
  echo "  ShowAKA: true"
  echo "  MacroContentsLimit: 2048"
  echo ""
  echo "Documentation:"
  echo "  CommentFormat: Doxygen"
  echo ""
  
} > "$CLANGD_FILE"

echo "✅ Wrote all include paths to '${CLANGD_FILE}'."


# --- Final Instructions ---
echo ""
echo "✅ Configuration complete!"
echo "------------------------------------------------------------------"
echo "🚀 NEXT STEPS:"
echo "   1. Install the 'C/C++ Extension Pack', 'CMake Tools', and 'clangd' extensions in VSCode."
echo "   2. Open the project folder in VSCode."
echo "   3. Select the 'Flair arch Cross-Compile (Release)' preset when prompted."
echo "   4. Your environment is now fully configured for development!"
echo "------------------------------------------------------------------"